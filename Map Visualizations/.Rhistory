}
makePlot("Campus Sant Cugat")
basePath <- (dirname(rstudioapi::getActiveDocumentContext()$path))
basedir <- paste(basePath, "/Readings/EACTIVE_1h/", sep="")
currentCampus <- "Campus Sant Cugat"
plot_dataframe <- function(df, x_range, title="", height = 100, discontinuities_df) {
p <- plot_ly(df, x = ~ts, y = ~v, type = 'scatter',
mode = 'lines', line = list(color = 'blue'),
width = 1750, height = height) %>%
layout(title = NULL,
xaxis = list(title = ' ', range = x_range),
yaxis = list(title = 'kWh'),
showlegend = FALSE) %>%
add_annotations(text = title, x=0.5, y = 1.05,
yref = "paper", xref = "paper", xanchor = "middle", yanchor = "top",
showarrow = FALSE, fontSize=15, align = "center")
if(length(discontinuities_df$timestamp) < 1){
return(p)
}
timestamps <- discontinuities_df$timestamp[[1]]
timestamps <- as.POSIXct(timestamps, format="%Y-%m-%d %H:%M:%S", tz="Europe/London")
lengths <- discontinuities_df$length[[1]]
shapes <- list()
for (i in 1:length(timestamps)) {
start_time <- timestamps[i]
end_time <- start_time + as.difftime(lengths[i], units = "hours")
rectangle <- list(
type = "rect",
x0 = start_time,
x1 = end_time,
y0 = 0,
y1 = max(df$v)*0.9,
fillcolor = "#FFB9B9",
opacity = 1,
line = list(width = 0)
)
shapes <- append(shapes, list(rectangle))
# if(lengths[i] >= 24){
#   p <- p %>% add_text(showlegend = FALSE, x = end_time+ as.difftime(6, units = "hours"), y = max(df$v)*0.9,
#        text = lengths[i])
# }
}
rectangle <- list(
type = "rect",
x0 = df$ts[length(df$ts)],
x1 = x_range[length(x_range)],
y0 = 0,
y1 = max(df$v)*0.9,
fillcolor = "#FFB9B9",
opacity = 1,
line = list(width = 0)
)
shapes <- append(shapes, list(rectangle))
p <- p %>% layout(shapes = shapes)
return(p)
}
makePlot <- function(currentCampus){
currentCampusDevices_df <- subset(allDevices_df, campus == currentCampus)
measurements <- list()
discontinuities <- list()
for(i in 1:nrow(currentCampusDevices_df)) {
currentDevice <- currentCampusDevices_df$device_id[i]
file2023 <- paste(basedir,currentDevice, "_2023.csv",sep="")
file2024 <- paste(basedir,currentDevice, "_2024.csv",sep="")
currentReading2023 <- data.frame()
currentReading2024 <- data.frame()
if(file.exists(file2023)){
currentReading2023 <- data.frame(read.csv(file2023))
}
if(file.exists(file2024)){
currentReading2024 <- data.frame(read.csv(file2024))
}
currentReading <- rbind(currentReading2023, currentReading2024)
if(nrow(currentReading) > 0){
currentReading <- currentReading[ , c("ts", "v")]
} else {
currentReading <- data.frame(matrix(nrow = 0, ncol = 2))
colnames(currentReading) <- c("ts", "v")
}
currentReading$ts <- as.POSIXct(currentReading$ts, format="%Y-%m-%dT%H:%M:%S", tz="Europe/London")
measurements[[i]] <- currentReading
discontinuities[[i]] <- info_json[info_json$device_id == currentDevice, ]$discontinuities
}
all_times <- do.call(c, lapply(measurements, function(df) df$ts))
common_time_range <- range(all_times)
nrows <- length(measurements) %/% 3 + (length(measurements) %% 3 > 0)
plots <- mapply(function(df, title, discontinuities_df) plot_dataframe(df, common_time_range, title, 200*nrows, discontinuities_df), measurements, currentCampusDevices_df$device_name, discontinuities, SIMPLIFY=FALSE)
# return(plots)
combined_plot <- subplot(plots, nrows = nrows,
titleX = TRUE, titleY = TRUE,
shareX = FALSE, shareY = FALSE)  %>%
layout(title = currentCampus)
return(combined_plot)
}
makePlot("Campus Sant Cugat")
library(RODBC)
install.packages("RODBC")
library(RODBC)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=10.7.30.10;database=datadis_upc_v2)
''
''
dbhandle <- odbcDriverConnect('driver={SQL Server};server=10.7.30.10;database=datadis_upc_v2')
res <- sqlQuery(dbhandle, 'select * from supplies')
dbhandle <- odbcDriverConnect('Driver=SQL Server;server=10.7.30.10;database=datadis_upc_v2')
dbhandle <- odbcDriverConnect('Driver=SQL Server;Server=10.7.30.10;Database=datadis_upc_v2;UID=UPC; PWD=SEERREES')
res <- sqlQuery(dbhandle, 'select * from supplies')
dbhandle <- odbcDriverConnect('Driver=SQL Server;Server=10.7.30.10;Database=datadis_upc_v2;UID=UPC; PWD=SEERREES')
install.packages("ffp3")
y <- tsibble(
Year = 2015:2019,
Observation = c(123, 39, 78, 52, 110),
index = Year
)
install.packages("fpp3")
library(fpp3)
y <- tsibble(
Year = 2015:2019,
Observation = c(123, 39, 78, 52, 110),
index = Year
)
y
y <- tsibble(
Year = 2015:2019,
Observation = c(123, 39, 78, 52, 110),
index = Year
)
y <- tsibble(
Year = 2015:2019,
Observation = c(123, 39, 78, 52, 110),
index = Year
)
library(tsibble)
y <- tsibble(
Year = 2015:2019,
Observation = c(123, 39, 78, 52, 110),
index = Year
)
y
library(fpp3)
z
olympic_running
olympic_running |> distinct(Sex)
PBS
PBS |>
filter(ATC2 == "A10")
select(Month, Concession, Type, Cost
PBS |>
PBS |>
filter(ATC2 == "A10") |>
select(Month, Concession, Type, Cost)
PBS |>
filter(ATC2 == "A10") |>
select(Month, Concession, Type, Cost) |>
summarise(TotalC = sum(Cost))
PBS |>
filter(ATC2 == "A10") |>
select(Month, Concession, Type, Cost) |>
summarise(TotalC = sum(Cost)) |>
mutate(Cost = TotalC/1e6)
PBS |>
filter(ATC2 == "A10") |>
select(Month, Concession, Type, Cost) |>
summarise(TotalC = sum(Cost)) |>
mutate(Cost = TotalC / 1e6) -> a10
a10
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
prison <- prison |>
mutate(Quarter = yearquarter(Date)) |>
select(-Date) |>
as_tsibble(key = c(State, Gender, Legal, Indigenous),
index = Quarter)
prison
source("~/.active-rstudio-document", echo=TRUE)
autoplot(a10, Cost) +
labs(y = "$ (millions)",
title = "Australian antidiabetic drug sales")
a10 |>
gg_season(Cost, labels = "both") +
labs(y = "$ (millions)",
title = "Seasonal plot: Antidiabetic drug sales")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(leaflet)
library(leafsync)
library(htmltools)
library(dplyr)
library(RColorBrewer)
library(sf)
library(leaflet.extras)
library(htmlwidgets)
library(RColorBrewer)
base_folder <- "/home/jaumeasensio/Documents/Projectes/BEEGroup/solar_potencial_estimation_v3/Results/"
neighborhoods <- c("Test_70_el Besòs i el Maresme")
neighborhoods <- c("70_el Besòs i el Maresme")
re_sf_list <- list()
############################################################################################
for (neighborhood in neighborhoods){
parcels <- list.files(path = paste(base_folder, neighborhood, "/Parcels/", sep=""))
parcels <- parcels
for (parcel in parcels){
constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
gpkg_files <- paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", constructions, "/Map files/", constructions, ".gpkg")
partial_re_sf_list <- lapply(gpkg_files, function(file) {
re_sf <- read_sf(file)
re_sf <- st_zm(re_sf)
re_sf <- st_transform(re_sf, 4326)
re_sf$parcel <- parcel
re_sf$construction <- gsub(".gpkg", "", basename(file))
return(re_sf)
})
re_sf_list <- c(re_sf_list, partial_re_sf_list)
}
}
merged_sf <- do.call(rbind, re_sf_list)
cadaster_sf_list <- list()
planes_sf_list <- list()
searchPath <- "/Plane Identification/"
for (neighborhood in neighborhoods){
parcels <- list.files(path = paste(base_folder, neighborhood, "/Parcels/", sep=""))
for (parcel in parcels){
constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
for (construction in constructions){
planes <- list.files(
path = paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, searchPath),
recursive = FALSE,
full.names = FALSE,
pattern = "\\.gpkg$"
)
if(length(planes) > 0){
gpkg_files <- paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, searchPath, planes)
partial_planes_sf_list <- lapply(gpkg_files, function(file) {
re_sf <- read_sf(file)
re_sf <- st_zm(re_sf)
re_sf <- st_transform(re_sf, 4326)
re_sf$parcel <- parcel
re_sf$construction <- construction
re_sf$plane  <- gsub(".gpkg", "", basename(file))
return(re_sf)
})
planes_sf_list <- c(planes_sf_list, partial_planes_sf_list)
}
}
}
for (parcel in parcels){
constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
gpkg_files <- paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", constructions, "/Map files/", constructions, ".gpkg")
partial_re_sf_list <- lapply(gpkg_files, function(file) {
re_sf <- read_sf(file)
re_sf <- st_zm(re_sf)
re_sf <- st_transform(re_sf, 4326)
re_sf$parcel <- parcel
re_sf$construction <- gsub(".gpkg", "", basename(file))
return(re_sf)
})
cadaster_sf_list <- c(re_sf_list, cadaster_sf_list)
}
}
planes_merged_sf <- do.call(rbind, planes_sf_list)
cadaster_sf_list <- list()
panels_sf_list <- list()
searchPath <- "/Solar Estimation Panels Simulated/"
for (neighborhood in neighborhoods){
parcels <- list.files(path = paste(base_folder, neighborhood, "/Parcels/", sep=""))
for (parcel in parcels){
constructions <- list.dirs(path = paste(base_folder, neighborhood, "/Parcels/", parcel, sep=""), recursive = FALSE, full.names = FALSE)
gpkg_files <- paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", constructions, "/Map files/", constructions, ".gpkg")
partial_cadaster_sf_list <- lapply(gpkg_files, function(file) {
re_sf <- read_sf(file)
re_sf <- st_zm(re_sf)
re_sf <- st_transform(re_sf, 4326)
re_sf$parcel <- parcel
re_sf$construction <- gsub(".gpkg", "", basename(file))
re_sf$Filename <- paste(parcel, "_",gsub(".gpkg", "", basename(file)),"_Report.pdf", sep="")
return(re_sf)
})
cadaster_sf_list <- c(cadaster_sf_list, partial_cadaster_sf_list)
for (construction in constructions){
planes <- list.files(path = paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, searchPath), recursive = FALSE, full.names = FALSE)
planes <- planes[!file.info(file.path(paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, searchPath), planes))$isdir]
planes <- planes[grepl("\\.gpkg$", planes)]
if(length(planes) > 0){
gpkg_files <- paste0(base_folder, neighborhood, "/Parcels/", parcel, "/", construction, searchPath, planes)
partial_panels_sf_list <- lapply(gpkg_files, function(file) {
re_sf <- read_sf(file)
re_sf <- st_zm(re_sf)
re_sf <- st_transform(re_sf, 4326)
re_sf$parcel <- parcel
re_sf$construction <- construction
re_sf$plane  <- gsub(".gpkg", "", basename(file))
return(re_sf)
})
panels_sf_list <- c(panels_sf_list, partial_panels_sf_list)
}
}
}
}
cadaster_merged_sf <- do.call(rbind, cadaster_sf_list)
panels_merged_sf <- do.call(rbind, panels_sf_list)
palettePanels <- colorNumeric(palette = "inferno", domain = panels_merged_sf$yearly, na.color = "transparent")
map3 <- leaflet(panels_merged_sf, options = leafletOptions(maxZoom = 19)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=21)) %>%
addPolygons(data = cadaster_merged_sf,
weight = 8,
color =  "black",
fillColor = "white",
fillOpacity = 0,
opacity = 1,
# label = ~paste(REFCAT, construction, CONSTRU, sep=". "
# popup = ~paste0('<h3>', gsub(".pdf", "",gsub("_Report.pdf", "", Filename)),"</h3>",
#                 '<a href="data/Reports/',Filename,'"target="_blank" rel="noopener noreferrer">
#                 Open the building PV potential analysis in a new tab</a>', '<br>',
#                 '<br> <embed src="data/Reports/', Filename,
#                 '" width="600px" height="400px"/>'),
popupOptions = popupOptions(maxHeight = 1000, maxWidth = 1000),
group = 'VectorReport',
)  %>%
addPolygons(
data = planes_merged_sf,
fillColor = ~ paletteSilhouette(silhouette),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 1,           # Adjust the fill opacity for better visibility
weight = 1,                 # Set outline thickness
group = "Plane identification",
# popup = ~paste0('<h3>', paste0(parcel,"_",construction),"</h3>",
#                 '<a href="data/Reports/', paste0(parcel,"_",construction,"_Report.pdf"),'"target="_blank" rel="noopener noreferrer">
#                           Open the building PV potential analysis in a new tab</a>', '<br>',
#                 '<br> <embed src="data/Reports/', paste0(parcel,"_",construction,"_Report.pdf"),
#                 '" width="600px" height="400px"/>'),
popupOptions = popupOptions(maxHeight = 1000, maxWidth = 1000),
) %>%
addPolygons(
data = planes_merged_sf,
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0,           # Adjust the fill opacity for better visibility
weight = 1,                 # Set outline thickness
group = "Panels simulation"
) %>%
addPolygons(
fillColor = ~ palettePanels(yearly),
opacity = 1,
stroke = TRUE,
color = "white",
fillOpacity = 1,           # Adjust the fill opacity for better visibility
weight = 0,                 # Set outline thickness
group = "Panels simulation",
# popup = ~paste0('<h3>', paste0(parcel,"_",construction),"</h3>",
#                 '<a href="data/Reports/', paste0(parcel,"_",construction,"_Report.pdf"),'"target="_blank" rel="noopener noreferrer">
#                           Open the building PV potential analysis in a new tab</a>', '<br>',
#                 '<br> <embed src="data/Reports/', paste0(parcel,"_",construction,"_Report.pdf"),
#                 '" width="600px" height="400px"/>'),
popupOptions = popupOptions(maxHeight = 1000, maxWidth = 1000),
) %>%
addLegend(
data = planes_merged_sf,
pal = paletteSilhouette,
values = ~silhouette,
title = "Silhouette score",
position = "bottomright",
opacity=1,
layerId = "Plane identification"
)%>%
addLegend(
pal = palettePanels,
values = ~yearly,
title = "Solar energy production<br>(kWh/panel/year)",
position = "bottomright",
opacity=1,
layerId = "Panels simulation"
)%>%
addLayersControl(
baseGroups = c(
"Panels simulation",
"Plane identification"
),
options = layersControlOptions(collapsed = FALSE)
)%>%
addScaleBar()%>%
htmlwidgets::onRender("
function(el, x) {
var initialLegend = 'Panels simulation' // Set the initial legend to be displayed by layerId
var myMap = this;
for (var legend in myMap.controls._controlsById) {
var el = myMap.controls.get(legend.toString())._container;
if(legend.toString() === initialLegend) {
el.style.display = 'block';
} else {
el.style.display = 'none';
};
};
myMap.on('baselayerchange',
function (layer) {
for (var legend in myMap.controls._controlsById) {
var el = myMap.controls.get(legend.toString())._container;
if(legend.toString() === layer.name) {
el.style.display = 'block';
} else {
el.style.display = 'none';
};
};
});
}")
paletteSilhouette <- colorNumeric(palette = c("red", "green"), domain = planes_merged_sf$silhouette)
map3 <- leaflet(panels_merged_sf, options = leafletOptions(maxZoom = 19)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik, options = providerTileOptions(opacity=1, maxZoom=21)) %>%
addPolygons(data = cadaster_merged_sf,
weight = 8,
color =  "black",
fillColor = "white",
fillOpacity = 0,
opacity = 1,
# label = ~paste(REFCAT, construction, CONSTRU, sep=". "
# popup = ~paste0('<h3>', gsub(".pdf", "",gsub("_Report.pdf", "", Filename)),"</h3>",
#                 '<a href="data/Reports/',Filename,'"target="_blank" rel="noopener noreferrer">
#                 Open the building PV potential analysis in a new tab</a>', '<br>',
#                 '<br> <embed src="data/Reports/', Filename,
#                 '" width="600px" height="400px"/>'),
popupOptions = popupOptions(maxHeight = 1000, maxWidth = 1000),
group = 'VectorReport',
)  %>%
addPolygons(
data = planes_merged_sf,
fillColor = ~ paletteSilhouette(silhouette),
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 1,           # Adjust the fill opacity for better visibility
weight = 1,                 # Set outline thickness
group = "Plane identification",
# popup = ~paste0('<h3>', paste0(parcel,"_",construction),"</h3>",
#                 '<a href="data/Reports/', paste0(parcel,"_",construction,"_Report.pdf"),'"target="_blank" rel="noopener noreferrer">
#                           Open the building PV potential analysis in a new tab</a>', '<br>',
#                 '<br> <embed src="data/Reports/', paste0(parcel,"_",construction,"_Report.pdf"),
#                 '" width="600px" height="400px"/>'),
popupOptions = popupOptions(maxHeight = 1000, maxWidth = 1000),
) %>%
addPolygons(
data = planes_merged_sf,
opacity = 1,
stroke = TRUE,
color = "black",
fillOpacity = 0,           # Adjust the fill opacity for better visibility
weight = 1,                 # Set outline thickness
group = "Panels simulation"
) %>%
addPolygons(
fillColor = ~ palettePanels(yearly),
opacity = 1,
stroke = TRUE,
color = "white",
fillOpacity = 1,           # Adjust the fill opacity for better visibility
weight = 0,                 # Set outline thickness
group = "Panels simulation",
# popup = ~paste0('<h3>', paste0(parcel,"_",construction),"</h3>",
#                 '<a href="data/Reports/', paste0(parcel,"_",construction,"_Report.pdf"),'"target="_blank" rel="noopener noreferrer">
#                           Open the building PV potential analysis in a new tab</a>', '<br>',
#                 '<br> <embed src="data/Reports/', paste0(parcel,"_",construction,"_Report.pdf"),
#                 '" width="600px" height="400px"/>'),
popupOptions = popupOptions(maxHeight = 1000, maxWidth = 1000),
) %>%
addLegend(
data = planes_merged_sf,
pal = paletteSilhouette,
values = ~silhouette,
title = "Silhouette score",
position = "bottomright",
opacity=1,
layerId = "Plane identification"
)%>%
addLegend(
pal = palettePanels,
values = ~yearly,
title = "Solar energy production<br>(kWh/panel/year)",
position = "bottomright",
opacity=1,
layerId = "Panels simulation"
)%>%
addLayersControl(
baseGroups = c(
"Panels simulation",
"Plane identification"
),
options = layersControlOptions(collapsed = FALSE)
)%>%
addScaleBar()%>%
htmlwidgets::onRender("
function(el, x) {
var initialLegend = 'Panels simulation' // Set the initial legend to be displayed by layerId
var myMap = this;
for (var legend in myMap.controls._controlsById) {
var el = myMap.controls.get(legend.toString())._container;
if(legend.toString() === initialLegend) {
el.style.display = 'block';
} else {
el.style.display = 'none';
};
};
myMap.on('baselayerchange',
function (layer) {
for (var legend in myMap.controls._controlsById) {
var el = myMap.controls.get(legend.toString())._container;
if(legend.toString() === layer.name) {
el.style.display = 'block';
} else {
el.style.display = 'none';
};
};
});
}")
map3
